(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{513:function(t,a,s){t.exports=s.p+"assets/img/crazy_rect.8b5c920b.png"},628:function(t,a,s){"use strict";s.r(a);var n=s(24),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"local-storage-sql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#local-storage-sql"}},[t._v("#")]),t._v(" Local Storage - SQL")]),t._v(" "),n("p",[t._v("Qt Quick supports a local storage API known from the web browsers the local storage API. the API is available under “import QtQuick.LocalStorage 2.0”.")]),t._v(" "),n("p",[t._v("In general, it stores the content into an SQLite database in a system-specific location in a unique ID based file based on the given database name and version. It is not possible to list or delete existing databases. You can find the storage location from "),n("code",[t._v("QQmlEngine::offlineStoragePath()")]),t._v(".")]),t._v(" "),n("p",[t._v("You use the API by first creating a database object and then creating transactions on the database. Each transaction can contain one or more SQL queries. The transaction will roll-back when a SQL query will fail inside the transaction.")]),t._v(" "),n("p",[t._v("For example, to read from a simple notes table with a text column you could use the local storage like this:")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" QtQuick\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" QtQuick.LocalStorage 2.0\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("Component.onCompleted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        const db = LocalStorage.openDatabaseSync("),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyExample"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Example database"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 10000)\n        db.transaction( function(tx) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            const result = tx.executeSql('select * from notes')\n            for(let i = 0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i < result.rows.length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i++) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                print(result.rows"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".text)\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(")\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),n("h2",{attrs:{id:"crazy-rectangle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#crazy-rectangle"}},[t._v("#")]),t._v(" Crazy Rectangle")]),t._v(" "),n("p",[t._v("As an example assume we would like to store the position of a rectangle on our scene.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(513),alt:"image"}})]),t._v(" "),n("p",[t._v("Here is the base of the example. It contains a rectange called "),n("code",[t._v("crazy")]),t._v(" that is draggable and shows its current "),n("code",[t._v("x")]),t._v(" and "),n("code",[t._v("y")]),t._v(" position as text.")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("crazy")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("objectName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crazy'")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#53d769"')])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("border.color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("Qt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lighter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("anchors.centerIn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("parent")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("text")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MouseArea")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("anchors.fill")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("parent")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("drag.target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("parent")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")])])])]),n("p",[t._v("You can drag the rectangle freely around. When you close the application and launch it again the rectangle is at the same position.")]),t._v(" "),n("p",[t._v("Now we would like to add that the x/y position of the rectangle is stored inside the SQL DB. For this, we need to add an "),n("code",[t._v("init")]),t._v(", "),n("code",[t._v("read")]),t._v(" and "),n("code",[t._v("store")]),t._v(" database function. These functions are called when on component completed and on component destruction.")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" QtQuick\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" QtQuick.LocalStorage 2.0\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reference to the database object")]),t._v("\n    property var db\n\n    "),n("span",{pre:!0,attrs:{class:"token javascript-function language-javascript"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initDatabase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// initialize the database object")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token javascript-function language-javascript"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("storeData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stores data to DB")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token javascript-function language-javascript"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reads and applies data from DB")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("Component.onCompleted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initDatabase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("Component.onDestruction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("storeData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("You could also extract the DB code in an own JS library, which does all the logic. This would be the preferred way if the logic gets more complicated.")]),t._v(" "),n("p",[t._v("In the database initialization function, we create the DB object and ensure the SQL table is created. Notice that the database functions are quite talkative so that you can follow along on the console.")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token javascript-function language-javascript"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initDatabase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// initialize the database object")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'initDatabase()'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    db "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LocalStorage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("openDatabaseSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CrazyBox"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A box who remembers its position"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transaction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tx")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'... create table'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        tx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeSql")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CREATE TABLE IF NOT EXISTS data(name TEXT, value TEXT)'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])])]),n("p",[t._v("The application next calls the read function to read existing data back from the database. Here we need to differentiate if there is already data in the table. To check we look into how many rows the select clause has returned.")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[t._v("function readData() "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reads and applies data from DB")]),t._v("\n    print('readData()')\n    if(!db) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" return "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    db.transaction(function(tx) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        print('... read crazy object')\n        const result = tx.executeSql('select * from data where name="),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crazy"')]),t._v("')\n        if(result.rows.length === 1) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            print('... update crazy geometry')\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the value column")]),t._v("\n            const value = result.rows"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".value\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// convert to JS object")]),t._v("\n            const obj = JSON.parse(value)\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// apply to object")]),t._v("\n            crazy.x = obj.x\n            crazy.y = obj.y\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(")\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),n("p",[t._v("We expect the data is stored in a JSON string inside the value column. This is not typical SQL like, but works nicely with JS code. So instead of storing the x,y as properties in the table, we store them as a complete JS object using the JSON stringify/parse methods. In the end, we get a valid JS object with x and y properties, which we can apply on our crazy rectangle.")]),t._v(" "),n("p",[t._v("To store the data, we need to differentiate the update and insert cases. We use update when a record already exists and insert if no record under the name “crazy” exists.")]),t._v(" "),n("div",{staticClass:"language-qml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-qml"}},[n("code",[t._v("function storeData() "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stores data to DB")]),t._v("\n    print('storeData()')\n    if(!db) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" return "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    db.transaction(function(tx) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        print('... check if a crazy object exists')\n        var result = tx.executeSql('SELECT * from data where name = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crazy"')]),t._v("')\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prepare object to be stored as JSON")]),t._v("\n        var obj = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v("x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token javascript-expression language-javascript"}},[t._v("crazy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" crazy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y ")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        if(result.rows.length === 1) "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use update")]),t._v("\n            print('... crazy exists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update it')\n            result = tx.executeSql('UPDATE data set value=? where name="),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crazy"')]),t._v("'"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("JSON.stringify(obj)"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(")\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" else "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use insert")]),t._v("\n            print('... crazy does not exists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" create it')\n            result = tx.executeSql('INSERT INTO data VALUES (?"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?)'"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("'crazy'"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" JSON.stringify(obj)"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(")\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(")\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),n("p",[t._v("Instead of selecting the whole recordset we could also use the SQLite count function like this: "),n("code",[t._v('SELECT COUNT(*) from data where name = "crazy"')]),t._v(" which would return use one row with the number of rows affected by the select query. Otherwise, this is common SQL code. As an additional feature, we use the SQL value binding using the "),n("code",[t._v("?")]),t._v(" in the query.")]),t._v(" "),n("p",[t._v("Now you can drag the rectangle and when you quit the application the database stores the x/y position and applies it on the next application run.")])])}),[],!1,null,null,null);a.default=e.exports}}]);